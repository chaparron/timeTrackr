services:
  backend:
    image: node:22
    container_name: ttback
    env_file:
      - ./backend/.env.dev
    volumes:
      - ./backend:/app/backend
    working_dir: /app/backend
    entrypoint: ["/bin/bash", "-c", "npm install && npm run start:dev"]
    ports:
      - "3000:3000"
    networks:
      - time-trackr-network
    environment:
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthcheck"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  frontend:
    image: node:22
    container_name: ttfront
    env_file:
      - ./frontend/.env.dev
    volumes:
      - ./frontend:/app/frontend
      - ./frontend/.env.dev:/app/frontend/.env
    working_dir: /app/frontend
    entrypoint: ["/bin/bash", "-c", "npm install && npm run dev -- --host 0.0.0.0"]
    ports:
      - "5173:5173"
    networks:
      - time-trackr-network
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: postgres:17.4
    container_name: ttdb
    env_file:
      - ./backend/.env.dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - time-trackr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:latest
    container_name: ttredis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - time-trackr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  time-trackr-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: